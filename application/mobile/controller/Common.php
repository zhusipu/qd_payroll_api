<?php
namespace app\mobile\controller;
use app\index\model;
use Gamegos\JWT\Exception\JWTExpiredException;
use think\Config;
use think\Controller;
use think\Cookie;
use think\Db;
use think\Debug;
use think\exception\HttpResponseException;
use Gamegos\JWT\Exception\JWTException;
use Gamegos\JWT\Validator;
use think\Request;
use think\Response;
use TimeCheer\Weixin\Open\OAuth2;
use TimeCheer\Weixin\QYAPI\AccessToken;

class Common extends Controller
{
    protected $token;
    protected $whiteList;
    protected $empNo = false;
    public function __construct()
    {
        parent::__construct();

    }

    /*
     * 初始一哈
     */
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->whiteList = ['/signin/index','/user/getUid'];
        $request = Request::instance();
        $controller = $request->controller();
        $action = $request->action();
        if(in_array(strtolower('/'.$controller.'/'.$action), $this->whiteList)){
            return true;
        }
        //验证令牌
        $jwt = Cookie::get(Config::get('jwt.cookieName'),Config::get('cookie.prefix'));
        if($jwt){
            try{
                $validator = new Validator();
                $token = $validator->validate($jwt,Config::get('jwt.key'));
                $this->empNo = $token->getClaim('sub');
            } catch (JWTException $e){
                //令牌过期
                $this->result('',403,$e->getMessage(),'json');
            } catch (JWTExpiredException $e){
                //令牌过期
                $this->result('',403,$e->getMessage(),'json');
            }
        }else{
            //如果session没有userid，就去腾讯获取userid
            $corpId = Config::get('workwechat.CorpID');
            $appConfig = Config::get('workwechat.app');
            $accessToken = new AccessToken($corpId, $appConfig['Secret']);
            $OAuth2 = new OAuth2($accessToken->get());
            $redirectUri = Url('Redirect/index',[],false,true);
            $url = $OAuth2->authorizeUrl($corpId,$redirectUri,false,$appConfig['AgentId'],isset($_SERVER['HTTP_REFERER'])?$_SERVER['HTTP_REFERER']:'');
            $this->result($url,403,'登录过期，请重新登录。','json');
        }
    }

    public function getEmpNo(){
        if(Config::get('app_debug') == true){
            return 1;
        }
        $userinfo = session('userinfo');
        return $userinfo['EMP_NO'];
    }

    public function success($data = '', $msg = '', $wait = 3, $url = null, array $header = [])
    {
        if (is_null($url) && !is_null(Request::instance()->server('HTTP_REFERER'))) {
            $url = Request::instance()->server('HTTP_REFERER');
        } elseif ('' !== $url) {
            $url = (strpos($url, '://') || 0 === strpos($url, '/')) ? $url : Url::build($url);
        }
        $result = [
            'code' => 1,
            'msg'  => $msg,
            'data' => $data,
            'url'  => $url,
            'wait' => $wait,
        ];

        $response = Response::create($result, 'json')->header($header);
        throw new HttpResponseException($response);
    }

    public function error($msg = '', $data = '', $wait = 3, $url = null,  array $header = [])
    {
        if (is_null($url)) {
            $url = Request::instance()->isAjax() ? '' : '';
        } elseif ('' !== $url) {
            $url = (strpos($url, '://') || 0 === strpos($url, '/')) ? $url : Url::build($url);
        }
        $result = [
            'code' => 0,
            'msg'  => $msg,
            'data' => $data,
            'url'  => $url,
            'wait' => $wait,
        ];

        $response = Response::create($result, 'json')->header($header);
        throw new HttpResponseException($response);
    }

}